// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce.Storefront.Repository.EntityFrameworkCore;

#nullable disable

namespace eCommerce.Storefront.Repository.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ShopDataContext))]
    partial class ShopDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("eCommerce.Storefront.Model.Basket.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("BasketId");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeliveryOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryOptionId");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Basket.BasketItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BasketItemId");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Qty");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Customers.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CustomerId");

                    b.Property<Guid?>("BasketId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("SecondName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Customers.DeliveryAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("DeliveryId");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("AddressLine");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Country");

                    b.Property<long>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("State");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerDeliveryAddresses", (string)null);
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Orders.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("OrderDate");

                    b.Property<long>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeliveryAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ShippingCharge");

                    b.Property<long?>("ShippingServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("State");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("ShippingServiceId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Orders.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderItemId");

                    b.Property<long>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Qty");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Products.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BrandId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Levi"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Bench"
                        });
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Products.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Trousers"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Shirts"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Socks"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Jackets"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "T-Shirts"
                        });
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductId");

                    b.Property<long?>("SizeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TitleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SizeId");

                    b.HasIndex("TitleId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            SizeId = 1L,
                            TitleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            SizeId = 2L,
                            TitleId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            SizeId = 3L,
                            TitleId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            SizeId = 4L,
                            TitleId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            SizeId = 1L,
                            TitleId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            SizeId = 2L,
                            TitleId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            SizeId = 3L,
                            TitleId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            SizeId = 4L,
                            TitleId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            SizeId = 1L,
                            TitleId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            SizeId = 2L,
                            TitleId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            SizeId = 3L,
                            TitleId = 3L
                        },
                        new
                        {
                            Id = 12L,
                            SizeId = 4L,
                            TitleId = 3L
                        },
                        new
                        {
                            Id = 13L,
                            SizeId = 1L,
                            TitleId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            SizeId = 2L,
                            TitleId = 4L
                        },
                        new
                        {
                            Id = 15L,
                            SizeId = 3L,
                            TitleId = 4L
                        },
                        new
                        {
                            Id = 16L,
                            SizeId = 4L,
                            TitleId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            SizeId = 1L,
                            TitleId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            SizeId = 2L,
                            TitleId = 5L
                        },
                        new
                        {
                            Id = 19L,
                            SizeId = 3L,
                            TitleId = 5L
                        },
                        new
                        {
                            Id = 20L,
                            SizeId = 4L,
                            TitleId = 5L
                        },
                        new
                        {
                            Id = 21L,
                            SizeId = 1L,
                            TitleId = 6L
                        },
                        new
                        {
                            Id = 22L,
                            SizeId = 2L,
                            TitleId = 6L
                        },
                        new
                        {
                            Id = 23L,
                            SizeId = 3L,
                            TitleId = 6L
                        },
                        new
                        {
                            Id = 24L,
                            SizeId = 4L,
                            TitleId = 6L
                        });
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Products.ProductColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ColorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Green"
                        });
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Products.ProductSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SizeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sizes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "L"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "M"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "S"
                        });
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Products.ProductTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductTitleId");

                    b.Property<long?>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("ProductName");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductTitles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            ColorId = 2L,
                            Name = "506 Stretch Diamond",
                            Price = 27.99m
                        },
                        new
                        {
                            Id = 2L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            ColorId = 1L,
                            Name = "506 Dark Stuff Straight",
                            Price = 25.99m
                        },
                        new
                        {
                            Id = 3L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            ColorId = 2L,
                            Name = "512 Bootcut Jeans",
                            Price = 22.99m
                        },
                        new
                        {
                            Id = 4L,
                            BrandId = 2L,
                            CategoryId = 1L,
                            ColorId = 2L,
                            Name = "Lucian Straight Jeans",
                            Price = 22.99m
                        },
                        new
                        {
                            Id = 5L,
                            BrandId = 2L,
                            CategoryId = 1L,
                            ColorId = 3L,
                            Name = "Lucian Straight Jeans",
                            Price = 22.99m
                        },
                        new
                        {
                            Id = 6L,
                            BrandId = 2L,
                            CategoryId = 1L,
                            ColorId = 4L,
                            Name = "Lucian Straight Jeans",
                            Price = 22.99m
                        });
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Shipping.Courier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CourierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Couriers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "UPS"
                        });
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Shipping.DeliveryOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("DeliveryOptionId");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Cost");

                    b.Property<decimal>("FreeDeliveryThreshold")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("FreeDeliveryThreshold");

                    b.Property<long?>("ShippingServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShippingServiceId");

                    b.ToTable("DeliveryOptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cost = 3.99m,
                            FreeDeliveryThreshold = 29.99m,
                            ShippingServiceId = 1L
                        });
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Shipping.ShippingService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CourierServiceId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("ServiceCode");

                    b.Property<long>("CourierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("ServiceDescription");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.ToTable("CourierServices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "UPS-STD",
                            CourierId = 1L,
                            Description = "UPS Standard"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f01eb6e7-a59f-4094-a38e-db1acb888a27",
                            ConcurrencyStamp = "c25e7311-4d62-4cd1-a42a-43fadecdac0a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4c93af0c-9921-4abb-a5eb-26f8e01b2249",
                            ConcurrencyStamp = "b497576b-9358-46eb-ab44-4b8aa5cd50f6",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3d5bc7f9-e445-46fe-b284-894c3f0a1873",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d092d71e-b8fe-44fb-85b6-06c27fab1fc1",
                            Email = "admin@ecommerce.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ECOMMERCE.COM",
                            NormalizedUserName = "ADMIN@ECOMMERCE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIV3gNJplD9fTYjDhH/lOnFcVVF16+jxwjD6hHx3OPFjOsbJOZsZE9smVDPFxDbZbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4LMSVL7MBG3LGFPYFJ3QJTEMSPVVIWRD",
                            TwoFactorEnabled = false,
                            UserName = "admin@ecommerce.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c8dd25ca-5d15-4a39-8023-7199a7f84286",
                            RoleId = "f01eb6e7-a59f-4094-a38e-db1acb888a27"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Basket.Basket", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("eCommerce.Storefront.Model.Shipping.DeliveryOption", "DeliveryOption")
                        .WithMany()
                        .HasForeignKey("DeliveryOptionId");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryOption");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Basket.BasketItem", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Basket.Basket", "Basket")
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Storefront.Model.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Customers.Customer", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Basket.Basket", "Basket")
                        .WithMany()
                        .HasForeignKey("BasketId");

                    b.Navigation("Basket");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Customers.DeliveryAddress", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Customers.Customer", "Customer")
                        .WithMany("DeliveryAddressBook")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Orders.Order", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Customers.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Storefront.Model.Customers.DeliveryAddress", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId");

                    b.HasOne("eCommerce.Storefront.Model.Shipping.ShippingService", "ShippingService")
                        .WithMany()
                        .HasForeignKey("ShippingServiceId");

                    b.OwnsOne("eCommerce.Storefront.Model.Orders.Payment", "Payment", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PaymentAmount");

                            b1.Property<DateTime>("DatePaid")
                                .HasColumnType("TEXT")
                                .HasColumnName("PaymentDate");

                            b1.Property<string>("Merchant")
                                .HasColumnType("TEXT")
                                .HasColumnName("PaymentMerchant");

                            b1.Property<string>("TransactionId")
                                .HasColumnType("TEXT")
                                .HasColumnName("PaymentTransactionId");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("DeliveryAddress");

                    b.Navigation("Payment");

                    b.Navigation("ShippingService");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Orders.OrderItem", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Orders.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Storefront.Model.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Products.Product", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Products.ProductSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("eCommerce.Storefront.Model.Products.ProductTitle", "Title")
                        .WithMany("Products")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Size");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Products.ProductTitle", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Products.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("eCommerce.Storefront.Model.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("eCommerce.Storefront.Model.Products.ProductColor", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Shipping.DeliveryOption", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Shipping.ShippingService", "ShippingService")
                        .WithMany()
                        .HasForeignKey("ShippingServiceId");

                    b.Navigation("ShippingService");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Shipping.ShippingService", b =>
                {
                    b.HasOne("eCommerce.Storefront.Model.Shipping.Courier", "Courier")
                        .WithMany("Services")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Basket.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Customers.Customer", b =>
                {
                    b.Navigation("DeliveryAddressBook");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Orders.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Products.ProductTitle", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCommerce.Storefront.Model.Shipping.Courier", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
