@page "/admin/account/login"
@layout AuthLayout
@inject HttpClient Http
@inject NavigationManager navManager
@inject ILoginService loginService

<div class="row">
    <div class="col-12">
        <h2>Login</h2>
        <EditForm Model="model" OnValidSubmit="UserLogin">
            <RadzenCard>
                <div class="row">
                    <div class="col-md-12">
                        <label>Email</label>
                    </div>
                    <div class="col-md-12">
                        <RadzenTextBox @bind-Value="model.Email" class="col-md-12"></RadzenTextBox>
                    </div>
                </div>

                <br />

                <div class="row">
                    <div class="col-md-12">
                        <label>Password</label>
                    </div>
                    <div class="col-md-12">
                        <RadzenPassword @bind-Value="model.Password" AutoComplete="false" class="col-md-12"></RadzenPassword>
                    </div>
                </div>

                <hr />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <Alert Title="Attention" ErrorList="loginResponse?.Errors" />

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login" Icon="account_circle" ButtonStyle="Radzen.ButtonStyle.Info" class="btn-block mr-2"></RadzenButton>
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Click="@((args) => GoToPage(args, "forgotpassword"))" Text="Reset password" Icon="lock_open" ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block btn-sm mr-2"></RadzenButton>
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();
    LoginResponse loginResponse = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loginService.Logout();
        }
    }

    public async Task UserLogin()
    {
        loginResponse = await (await Http.PostAsJsonAsync<LoginRequest>("api/accounts/login", model))?.Content?.ReadFromJsonAsync<LoginResponse>();

        if (loginResponse.IsSuccess)
        {
            await loginService.Login(loginResponse.Token);
            navManager.NavigateTo("/admin");
        }
    }

    void GoToPage(MouseEventArgs args, string page)
    {
        navManager.NavigateTo($"/admin/account/{page}");
    }
}