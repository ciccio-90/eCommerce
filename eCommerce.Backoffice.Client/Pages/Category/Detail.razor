@page "/admin/category/detail/{Id:int?}"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<Alert Title="@error" ErrorList="new List<string>()" CSSClass="danger" />

<Details Title="Category" TItem="CategoryDto" Item="category" CanDelete="@(category?.Id > 0)" OnSave="@((item) => SaveCategory(item as CategoryDto))" OnDelete="@((item) => DeleteCategory(item as CategoryDto))" OnCancel="@((item) => NavigationManager.NavigateTo("/admin/category/list"))">       
    <FormFields Context="category">
        <div class="row">
            <div class="col-md-12">
                <label>Name</label>
            </div>
            <div class="col-md-12">
                <RadzenTextBox @bind-Value="category.Name" class="col-md-12"></RadzenTextBox>
            </div>
        </div>
    </FormFields>
</Details>

@code {
    [Parameter]
    public int? Id { get; set; }

    string route = "api/categories";
    string listUrl = "/admin/category/list";
    CategoryDto category;
    string error;

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            category = await HttpClient.GetFromJsonAsync<CategoryDto>($"{route}/{Id}");
        }
        else
        {
            category = new CategoryDto();   
        }
    }

    async Task SaveCategory(CategoryDto item)
    {
        if (item != null)
        {
            if (item.Id > 0)
            {
                HttpResponseMessage httpResponseMessage = await HttpClient.PutAsJsonAsync<CategoryDto>($"{route}/{item.Id}", item);

                if (httpResponseMessage != null && httpResponseMessage.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo(listUrl);
                }
                else
                {
                    error = await httpResponseMessage.Content.ReadAsStringAsync();
                }
            }
            else 
            {
                HttpResponseMessage httpResponseMessage = await HttpClient.PostAsJsonAsync<CategoryDto>(route, item);

                if (httpResponseMessage != null && httpResponseMessage.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo(listUrl);
                }
                else
                {
                    error = await httpResponseMessage.Content.ReadAsStringAsync();
                }
            }
        } 
    }

    async Task DeleteCategory(CategoryDto item)
    {
        if (item != null && item.Id > 0)
        {
            HttpResponseMessage httpResponseMessage = await HttpClient.DeleteAsync($"{route}/{item.Id}");

            if (httpResponseMessage != null && httpResponseMessage.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo(listUrl);
            }
            else
            {
                error = await httpResponseMessage.Content.ReadAsStringAsync();
            }
        }
    }
}